# TrueNAS SCALE Docker Compose - Production Ready
# File: truenas-docker-compose-production.yaml
# Format: Docker Compose v3.8 (NOT Kubernetes)

version: "3.3"

services:
  redis:
    image: redis:7-alpine
    container_name: aetherpharma-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  postgres:
    image: postgres:15-alpine
    container_name: aetherpharma-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: pharmacy_db
      POSTGRES_USER: pharmacy_user
      POSTGRES_PASSWORD: pharmacy_password
    volumes:
      - postgres_data:/var/lib/postgresql/data

  backend:
    image: golang:1.23-alpine
    container_name: aetherpharma-backend
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    ports:
      - "8080:8080"
    environment:
      # Environment Setting - Production mode with PostgreSQL
      ENV: production
      ENVIRONMENT: production
      # Database Configuration
      DB_TYPE: postgres
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: pharmacy_user
      DB_PASSWORD: pharmacy_password
      DB_NAME: pharmacy_db
      DB_SSL_MODE: disable
      # Disable cloud database features
      CLOUD_DB_ENABLED: "false"
      LOCAL_DB_ENABLED: "false"
      READ_REPLICA_ENABLED: "false"
      DUAL_DB_MODE: "false"
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      REDIS_PASSWORD: ""
      # Security Configuration
      JWT_SECRET: "truenas-demo-secret-key-32-chars"
      ENCRYPTION_KEY: "abcdefghijklmnopqrstuvwxyz123456"
      # Server Configuration
      SERVER_HOST: "0.0.0.0"
      SERVER_PORT: "8080"
      # Force Gin to bind to all interfaces
      GIN_HOST: "0.0.0.0"
      GIN_PORT: "8080"
      GIN_MODE: debug
      HIPAA_MODE: true
      # CORS Configuration
      CORS_ALLOWED_ORIGINS: "*"
      CORS_ALLOWED_METHODS: "GET,POST,PUT,DELETE,OPTIONS,PATCH"
      CORS_ALLOWED_HEADERS: "*"
    command: sh -c "echo '=== Backend Container Starting ===' && apk add --no-cache git curl gcc musl-dev postgresql-client && echo 'Waiting for PostgreSQL...' && sleep 10 && echo 'Setting up PostgreSQL extensions...' && PGPASSWORD=pharmacy_password psql -h postgres -U pharmacy_user -d pharmacy_db -c 'CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"; CREATE EXTENSION IF NOT EXISTS \"pgcrypto\";' || true && rm -rf /app && git clone --depth 1 https://github.com/jhustcoding/AetherPharma.git /app && cd /app && echo 'Updating GORM dependencies...' && go get -u gorm.io/gorm@latest && go get -u gorm.io/driver/postgres@latest && go get -u github.com/jackc/pgx/v5@latest && go mod tidy && echo 'Installing dependencies...' && go mod download && echo 'Starting backend server...' && CGO_ENABLED=1 go run cmd/server/main.go"
    volumes:
      - app_data:/data

  frontend:
    image: node:18-alpine
    container_name: aetherpharma-frontend
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_BASE_URL: http://192.168.0.9:8080
      REACT_APP_API_URL: http://192.168.0.9:8080/api/v1
      DISABLE_ESLINT_PLUGIN: true
      TSC_COMPILE_ON_ERROR: true
      GENERATE_SOURCEMAP: false
      CI: false
      SKIP_PREFLIGHT_CHECK: true
      TS_NODE_COMPILER_OPTIONS: '{"strict": false}'
      TYPESCRIPT_ERROR_ON_WARNING: false
    command: sh -c "apk add --no-cache git && rm -rf /app && git clone --depth 1 https://github.com/jhustcoding/AetherPharma.git /app && cd /app/frontend && echo 'Replacing localhost with actual API URL...' && find src -name '*.tsx' -o -name '*.ts' | xargs sed -i 's|http://localhost:8080|http://192.168.0.9:8080|g' && sleep 45 && npm install && npm start"

volumes:
  postgres_data:
  redis_data:
  app_data: